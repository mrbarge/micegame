import{GAME_CONFIG}from"./gameConfig.js";export class GameLogic{constructor(e){this.gameBoard=e,this.currentPlayer=GAME_CONFIG.PLAYERS.BLUE,this.blueScore=0,this.redScore=0,this.selectedColumn=null}switchPlayer(){this.currentPlayer=this.currentPlayer===GAME_CONFIG.PLAYERS.BLUE?GAME_CONFIG.PLAYERS.RED:GAME_CONFIG.PLAYERS.BLUE,this.updateUI()}async makeMove(e,t){return this.gameBoard.getValidColumns(this.currentPlayer).includes(e)?(this.setButtonsEnabled(!1),window.gameScene&&await window.gameScene.animateColumnMovement(e,t),this.gameBoard.moveColumn(e,t),window.gameScene&&window.gameScene.updateGridDisplay(),await this.processMiceMovement(),this.switchPlayer(),this.setButtonsEnabled(!0),!0):(console.log(`Column ${e} is not valid for ${this.currentPlayer}`),!1)}async processMiceMovement(){await this.moveMiceForPlayer(this.currentPlayer);const e=this.currentPlayer===GAME_CONFIG.PLAYERS.BLUE?GAME_CONFIG.PLAYERS.RED:GAME_CONFIG.PLAYERS.BLUE;await this.moveMiceForPlayer(e)}async moveMiceForPlayer(e){const t=e===GAME_CONFIG.PLAYERS.BLUE?this.gameBoard.blueMicePositions:this.gameBoard.redMicePositions,o=e===GAME_CONFIG.PLAYERS.BLUE?GAME_CONFIG.CELL_TYPES.BLUE_MOUSE:GAME_CONFIG.CELL_TYPES.RED_MOUSE,s=e===GAME_CONFIG.PLAYERS.BLUE?1:-1,i=[...t].map((e,t)=>({mouse:e,index:t})).sort((t,o)=>(e===GAME_CONFIG.PLAYERS.BLUE?GAME_CONFIG.GRID_WIDTH-1-t.mouse.col:t.mouse.col)-(e===GAME_CONFIG.PLAYERS.BLUE?GAME_CONFIG.GRID_WIDTH-1-o.mouse.col:o.mouse.col));for(let t=0;t<i.length;t++){const{mouse:r,index:n}=i[t];let E=!0;for(;E;){E=!1;let a=r.row,c=r.col;if(r.row+1<GAME_CONFIG.GRID_HEIGHT&&this.gameBoard.isEmpty(r.row+1,r.col)&&!this.isCellOccupiedByMouse(r.row+1,r.col))a=r.row+1,E=!0;else{const e=r.col+s;e>=0&&e<GAME_CONFIG.GRID_WIDTH&&this.gameBoard.isEmpty(r.row,e)&&!this.isCellOccupiedByMouse(r.row,e)&&(c=e,E=!0)}if(E&&(this.gameBoard.grid[r.row][r.col]=GAME_CONFIG.CELL_TYPES.EMPTY,this.gameBoard.grid[a][c]=o,window.gameScene&&await window.gameScene.animateMouseMovement(r.row,r.col,a,c,o),r.row=a,r.col=c,e===GAME_CONFIG.PLAYERS.BLUE&&r.col===GAME_CONFIG.GRID_WIDTH-1||e===GAME_CONFIG.PLAYERS.RED&&0===r.col)){this.scorePoint(e),this.removeMouse(e,n);const o=i.findIndex(e=>e.index===n);-1!==o&&(i.splice(o,1),t--);break}}}}scorePoint(e){e===GAME_CONFIG.PLAYERS.BLUE?this.blueScore++:this.redScore++,this.updateScoreDisplay()}removeMouse(e,t){if(e===GAME_CONFIG.PLAYERS.BLUE){const e=this.gameBoard.blueMicePositions[t];this.gameBoard.grid[e.row][e.col]=GAME_CONFIG.CELL_TYPES.EMPTY,this.gameBoard.blueMicePositions.splice(t,1)}else{const e=this.gameBoard.redMicePositions[t];this.gameBoard.grid[e.row][e.col]=GAME_CONFIG.CELL_TYPES.EMPTY,this.gameBoard.redMicePositions.splice(t,1)}}updateUI(){const e=document.getElementById("current-player"),t=this.currentPlayer===GAME_CONFIG.PLAYERS.BLUE?"Blue Player's Turn":"Red Player's Turn";e.textContent=t,this.updateColumnButtons()}updateColumnButtons(){const e=this.gameBoard.getValidColumns(this.currentPlayer);for(let t=0;t<GAME_CONFIG.GRID_WIDTH;t++){const o=document.getElementById(`up-${t}`),s=document.getElementById(`down-${t}`);if(o&&s){const i=e.includes(t);o.disabled=!i,s.disabled=!i}}}setButtonsEnabled(e){for(let t=0;t<GAME_CONFIG.GRID_WIDTH;t++){const o=document.getElementById(`up-${t}`),s=document.getElementById(`down-${t}`);o&&s&&(e?this.updateColumnButtons():(o.disabled=!0,s.disabled=!0))}}updateScoreDisplay(){document.getElementById("blue-score").textContent=this.blueScore,document.getElementById("red-score").textContent=this.redScore}isCellOccupiedByMouse(e,t){const o=this.gameBoard.getCellType(e,t);return o===GAME_CONFIG.CELL_TYPES.BLUE_MOUSE||o===GAME_CONFIG.CELL_TYPES.RED_MOUSE}}