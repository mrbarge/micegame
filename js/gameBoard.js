import{GAME_CONFIG}from"./gameConfig.js";export class GameBoard{constructor(){this.grid=[],this.blueMicePositions=[],this.redMicePositions=[],this.initializeGrid(),this.placeMice()}initializeGrid(){this.grid=Array(GAME_CONFIG.GRID_HEIGHT).fill().map(()=>Array(GAME_CONFIG.GRID_WIDTH).fill(GAME_CONFIG.CELL_TYPES.EMPTY));for(let o=0;o<GAME_CONFIG.GRID_WIDTH;o++)this.generateWallsForColumn(o)}generateWallsForColumn(o){const i=Math.floor(Math.random()*(GAME_CONFIG.MAX_WALLS_PER_COLUMN-GAME_CONFIG.MIN_WALLS_PER_COLUMN+1))+GAME_CONFIG.MIN_WALLS_PER_COLUMN,E=[];for(;E.length<i;){const o=Math.floor(Math.random()*GAME_CONFIG.GRID_HEIGHT);E.includes(o)||E.push(o)}E.forEach(i=>{this.grid[i][o]=GAME_CONFIG.CELL_TYPES.WALL})}placeMice(){this.placeMiceForPlayer(GAME_CONFIG.PLAYERS.BLUE,GAME_CONFIG.BLUE_COLUMNS),this.placeMiceForPlayer(GAME_CONFIG.PLAYERS.RED,GAME_CONFIG.RED_COLUMNS)}placeMiceForPlayer(o,i){const E=o===GAME_CONFIG.PLAYERS.BLUE?this.blueMicePositions:this.redMicePositions,t=o===GAME_CONFIG.PLAYERS.BLUE?GAME_CONFIG.CELL_TYPES.BLUE_MOUSE:GAME_CONFIG.CELL_TYPES.RED_MOUSE,G=[];for(const o of i){this.getValidPositionsInColumn(o).forEach(i=>{G.push({row:i,col:o})})}for(let o=G.length-1;o>0;o--){const i=Math.floor(Math.random()*(o+1));[G[o],G[i]]=[G[i],G[o]]}let e=0;for(let o=0;o<G.length&&e<GAME_CONFIG.MICE_PER_PLAYER;o++){const i=G[o];this.grid[i.row][i.col]===GAME_CONFIG.CELL_TYPES.EMPTY&&(this.grid[i.row][i.col]=t,E.push({row:i.row,col:i.col}),e++)}e<GAME_CONFIG.MICE_PER_PLAYER?console.warn(`Only placed ${e} out of ${GAME_CONFIG.MICE_PER_PLAYER} mice for ${o} - not enough valid positions`):console.log(`Successfully placed ${e} mice for ${o}`)}getValidPositionsInColumn(o){const i=[];let E=GAME_CONFIG.GRID_HEIGHT-1;for(let t=GAME_CONFIG.GRID_HEIGHT-1;t>=0;t--)if(this.grid[t][o]===GAME_CONFIG.CELL_TYPES.WALL){E=t-1;let o=E;for(;o>=0;)i.push(o),o--;break}if(0===i.length)for(let o=GAME_CONFIG.GRID_HEIGHT-1;o>=0;o--)i.push(o);return i}moveColumn(o,i){const E=[];for(let i=0;i<GAME_CONFIG.GRID_HEIGHT;i++)E.push(this.grid[i][o]);if(1===i){const o=E.shift();E.push(o)}else{const o=E.pop();E.unshift(o)}for(let i=0;i<GAME_CONFIG.GRID_HEIGHT;i++)this.grid[i][o]=E[i];this.updateMicePositions()}updateMicePositions(){this.blueMicePositions=[],this.redMicePositions=[];for(let o=0;o<GAME_CONFIG.GRID_HEIGHT;o++)for(let i=0;i<GAME_CONFIG.GRID_WIDTH;i++)this.grid[o][i]===GAME_CONFIG.CELL_TYPES.BLUE_MOUSE?this.blueMicePositions.push({row:o,col:i}):this.grid[o][i]===GAME_CONFIG.CELL_TYPES.RED_MOUSE&&this.redMicePositions.push({row:o,col:i})}getValidColumns(o){const i=o===GAME_CONFIG.PLAYERS.BLUE?this.blueMicePositions:this.redMicePositions,E=new Set;return i.forEach(o=>{E.add(o.col)}),Array.from(E).sort((o,i)=>o-i)}getCellType(o,i){return o<0||o>=GAME_CONFIG.GRID_HEIGHT||i<0||i>=GAME_CONFIG.GRID_WIDTH?null:this.grid[o][i]}isEmpty(o,i){return this.getCellType(o,i)===GAME_CONFIG.CELL_TYPES.EMPTY}countMice(){const o={blue:0,red:0};for(let i=0;i<GAME_CONFIG.GRID_HEIGHT;i++)for(let E=0;E<GAME_CONFIG.GRID_WIDTH;E++)this.grid[i][E]===GAME_CONFIG.CELL_TYPES.BLUE_MOUSE?o.blue++:this.grid[i][E]===GAME_CONFIG.CELL_TYPES.RED_MOUSE&&o.red++;return console.log(`Mice on board - Blue: ${o.blue}, Red: ${o.red}`),o}}